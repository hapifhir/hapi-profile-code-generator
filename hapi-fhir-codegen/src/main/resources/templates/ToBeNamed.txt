package org.socraticgrid.fhir.generated;

import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ca.uhn.fhir.model.api.Bundle;
import ca.uhn.fhir.model.api.BundleEntry;
import ca.uhn.fhir.model.api.IResource;

public class AdapterFactory
{
	public static final String GENERATED_PACKAGE_PREFIX = "org.hspc.fhir.generated.";
	public static final String HAPI_FHIR_RESOURCE_PREFIX = "ca.uhn.fhir.model.dstu2.resource.";
	public static final Logger LOGGER = LoggerFactory.getLogger(AdapterFactory.class);
	
	public static Map<String, List<?>> adapt(Bundle b){
	       Map<String, List<?>> adapteeMap = new HashMap<>();
	       for (BundleEntry entry : b.getEntries()) {
	           Object adapter = adapt(entry.getResource());
	           if(adapter != null) {
	        	   List list = adapteeMap.get(entry.getResource().getClass().getCanonicalName());
	        	   if(list == null) {
	        		   list = new ArrayList();
	        		   adapteeMap.put(entry.getResource().getClass().getCanonicalName(), list);
	        	   }
	        	   list.add(adapter);
	           }
	       }
	       return adapteeMap;
	   }
	   
	   public static Object adapt(IResource resource) {
		   Object adapter = null;
		   String adapterName = resource.getResourceName() + "Adapter";
		   String resourceName = resource.getResourceName();
		   try {
			   Class clazz = Class.forName(GENERATED_PACKAGE_PREFIX + adapterName);
			   adapter = clazz.newInstance();
			   Class[] args = new Class[1];
			   args[0] = Class.forName(HAPI_FHIR_RESOURCE_PREFIX + resourceName);
			   Method method = clazz.getDeclaredMethod("setAdaptee", args);
			   Object[] resourceArray = new Object[1];
			   resourceArray[0] = resource;
			   method.invoke(adapter, resourceArray);
		   } catch(Exception e) {
			   LOGGER.error("Unable to adapt " + resourceName, e);
		   }
	       return adapter;
	   }
}

   public List<CodeableConceptDt> getRace()
   {
      List<ExtensionDt> extensions = adaptedClass.getUndeclaredExtensionsByUrl("http://hl7.org/fhir/StructureDefinition/us-core-race");
      List<CodeableConceptDt> returnList = new ArrayList<CodeableConceptDt>();
      for(ExtensionDt extension : extensions) {
    	  returnList.add((CodeableConceptDt)extension.getValue());
      }
      return returnList;
   }

   public void setRace(List<CodeableConceptDt> param)
   {
      if(param != null && (param).size() > 0) {
    	  for(int index = 0; index < ((List)param).size(); index++) {
    		  adaptedClass.addUndeclaredExtension(false, "http://hl7.org/fhir/StructureDefinition/us-core-race", (CodeableConceptDt)param.get(index));
    	  }
      }
   }